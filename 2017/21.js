const mt = require("@pelevesque/matrix-transformers");

const input = `../.. => .../#.#/...
#./.. => ..#/..#/#..
##/.. => .../#../..#
.#/#. => #../.../...
##/#. => #.#/.#./#..
##/## => ..#/#.#/..#
.../.../... => .#../#..#/#.../.#..
#../.../... => ..##/..##/.#.#/....
.#./.../... => ..##/..##/.###/##..
##./.../... => ..../.##./#.##/..#.
#.#/.../... => ####/#.##/#.##/#.#.
###/.../... => #..#/..#./..../##.#
.#./#../... => ..#./.#../...#/#.##
##./#../... => ..../#.##/#..#/.#..
..#/#../... => ##.#/####/###./###.
#.#/#../... => ..../#.##/.###/#.#.
.##/#../... => ..#./##.#/####/..##
###/#../... => ..#./.##./...#/..#.
.../.#./... => .###/#.../.#../####
#../.#./... => ###./.#.#/#.##/##.#
.#./.#./... => ..##/..#./###./..#.
##./.#./... => #..#/..#./###./...#
#.#/.#./... => #.../##.#/#.##/#..#
###/.#./... => ...#/#..#/####/##.#
.#./##./... => #.##/#.##/..../#.#.
##./##./... => ..##/###./..#./####
..#/##./... => ..../##../##.#/.##.
#.#/##./... => ##../####/####/.#.#
.##/##./... => ..../##.#/.###/##..
###/##./... => .#../#.#./.#../..##
.../#.#/... => ####/#.#./..##/#..#
#../#.#/... => .#../.#../#..#/....
.#./#.#/... => ..##/.##./####/#.#.
##./#.#/... => ..#./###./.#../....
#.#/#.#/... => ..#./..#./...#/#...
###/#.#/... => ###./.#../##../####
.../###/... => #.##/####/####/..##
#../###/... => .#.#/...#/###./...#
.#./###/... => ..../.#.#/.#../....
##./###/... => ...#/.###/..../.##.
#.#/###/... => ..##/###./.#../#..#
###/###/... => .###/..#./..#./.###
..#/.../#.. => .##./###./####/#.#.
#.#/.../#.. => ####/#.../#.../..##
.##/.../#.. => ###./#..#/..#./.#..
###/.../#.. => .###/.##./#.#./.###
.##/#../#.. => ##.#/...#/.#.#/...#
###/#../#.. => #.##/..#./..../#..#
..#/.#./#.. => #..#/##.#/.##./####
#.#/.#./#.. => ###./..##/#..#/#..#
.##/.#./#.. => .#../..../...#/...#
###/.#./#.. => .#../##../.###/..#.
.##/##./#.. => ##../..##/##../##.#
###/##./#.. => #.##/#..#/.###/####
#../..#/#.. => ##.#/####/#.../..##
.#./..#/#.. => #..#/..../..../###.
##./..#/#.. => #..#/##.#/##.#/#.#.
#.#/..#/#.. => .###/##.#/####/#...
.##/..#/#.. => ####/.##./...#/#..#
###/..#/#.. => .#.#/####/##.#/...#
#../#.#/#.. => ..##/.##./..##/##..
.#./#.#/#.. => #.../##../..##/..#.
##./#.#/#.. => ...#/##.#/#..#/.#..
..#/#.#/#.. => #.#./##../#.##/###.
#.#/#.#/#.. => ##../##.#/#.#./....
.##/#.#/#.. => ####/...#/####/.#..
###/#.#/#.. => ..../.#../.#../....
#../.##/#.. => .#.#/..#./#..#/.###
.#./.##/#.. => #.../.#.#/.###/.##.
##./.##/#.. => #.#./#.#./.#../###.
#.#/.##/#.. => ####/##../.##./####
.##/.##/#.. => #.../#.#./#.##/###.
###/.##/#.. => ####/####/..../####
#../###/#.. => ####/.##./...#/##.#
.#./###/#.. => .#../#.##/#..#/..##
##./###/#.. => #.#./..##/#.../..##
..#/###/#.. => #.##/.###/#.#./###.
#.#/###/#.. => #.##/#.##/..../#..#
.##/###/#.. => .##./#.#./..##/####
###/###/#.. => .##./#..#/#.../###.
.#./#.#/.#. => #.#./#..#/#..#/##.#
##./#.#/.#. => ...#/#.#./##.#/###.
#.#/#.#/.#. => ##.#/..##/##.#/#.##
###/#.#/.#. => .#.#/..#./##../.##.
.#./###/.#. => #..#/..#./..##/#...
##./###/.#. => ####/.#.#/####/..#.
#.#/###/.#. => #.#./..##/##../#..#
###/###/.#. => ...#/..../..../#.#.
#.#/..#/##. => ..#./.##./###./.#.#
###/..#/##. => #.../###./...#/####
.##/#.#/##. => ..../..../.###/##..
###/#.#/##. => ##../..../#.#./.##.
#.#/.##/##. => .#.#/##../..##/#.#.
###/.##/##. => ###./####/...#/.#..
.##/###/##. => ..##/#.../..##/.#.#
###/###/##. => ..##/...#/.###/.#..
#.#/.../#.# => ..##/#.../##.#/....
###/.../#.# => #.##/#..#/..../##..
###/#../#.# => #.../..../##.#/..#.
#.#/.#./#.# => ###./..##/.#../.##.
###/.#./#.# => ..../#..#/.###/#..#
###/##./#.# => .#.#/###./##.#/.###
#.#/#.#/#.# => ..../..../.##./#..#
###/#.#/#.# => .###/.#.#/...#/.###
#.#/###/#.# => .#.#/##../.#../.#..
###/###/#.# => .#.#/.##./#.##/....
###/#.#/### => ..#./..#./..#./..##
###/###/### => ##.#/..##/.#.#/....`.split("\n").map(s => s.split(" => "));
const rules = {};

let current = ".#./..#/###";

for (const line of input) {
    const [pattern, result] = line;
    
    for (const transformation of getTransformations(pattern)) {
        rules[transformation] = result;
    }
}

function getTransformations(pattern) {
    const matrix = pattern.split("/").map(s => s.split(""));

    const transformations = [];
    transformations.push(matrix);
    transformations.push(mt.rotate90(matrix));
    transformations.push(mt.rotate180(matrix));
    transformations.push(mt.rotate270(matrix));

    for (let i = 0; i < 4; i++) {
        const me = transformations[i];
        transformations.push(mt.reflectHorizontally(me));
        transformations.push(mt.reflectVertically(me));
        transformations.push(mt.reflectHorizontally(mt.reflectVertically(me)));
    }

    return [...new Set(transformations.map(m => m.map(r => r.join("")).join("/")))];
}

for (let a = 1; a <= 5; a++) {
    const splits = current.split("/");
    if (splits[0].length % 2 == 0) {
        for (let i = 0; i < splits.length; i += 2) {
            
        }
    } else {
        
    }
}